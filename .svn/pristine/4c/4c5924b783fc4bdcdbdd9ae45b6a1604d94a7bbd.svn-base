package com.next.sitenotice.web;


import java.util.List;

import javax.inject.Inject;
import javax.validation.groups.Default;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.next.common.valid.ModifyType;
import com.next.common.valid.RegistType;
import com.next.common.vo.ResultMessageVO;
import com.next.sitenotice.service.ISitenoticeService;
import com.next.sitenotice.vo.SitenoticeVO;
import com.next.sitequestion.vo.SitequestionSearchVO;

@Controller
@RequestMapping("/sitenotice")
public class SitenoticeController {
	
	/*
	 사이트 공지사항 컨트롤러
	 작성자 김아름 
	 */
	
	@Inject
	ISitenoticeService sitenoticeService;
	
	private final Logger logger = LoggerFactory.getLogger(getClass());
	
	// 사이트 공지사항 리스트
	@RequestMapping(value = "/sitenoticeList.edu")
	public String sitenoticeList(ModelMap model, SitequestionSearchVO sitequestionSearchVO) throws Exception {
		logger.debug("sitequestionSearchVO={}",sitequestionSearchVO);
		
		List<SitenoticeVO> sitenoticeVOList = sitenoticeService.getSitenoticeVOList(sitequestionSearchVO);
		
		model.addAttribute("sitenoticeVOList", sitenoticeVOList);
		
		logger.debug("sitenoticeVOList={}",sitenoticeVOList);
		
		return "sitenotice/sitenoticeList";
	}
	
	// 사이트 공지사항 상세보기 화면
	@RequestMapping(value = "/sitenoticeView.edu")
	public String sitenoticeView(int snNo, ModelMap model) throws Exception {
		
		logger.debug("snNo={}",snNo);
		
		try {
			SitenoticeVO sitenoticeVO = sitenoticeService.getSitenoticeVO(snNo);
			
			model.addAttribute("sitenoticeVO", sitenoticeVO);
			
			return "sitenotice/sitenoticeView";
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
			
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			
			resultMessageVO.setResult(false)
						   .setTitle("조회 실패")
						   .setMessage("해당 글이 존재하지 않습니다.")
						   .setUrl("/sitenotice/sitenoticeList.edu")
						   .setUrlTitle("목록");
			
			model.addAttribute("resultMessageVO", resultMessageVO);
			
			return "common/message";
		}
	}
	
	// 사이트 공지사항 새글쓰기
	@RequestMapping(value = "/sitenoticeInsert.edu")
	public void sitenoticeInsert(@ModelAttribute("sitenoticeVO") SitenoticeVO sitenoticeVO
								 , ModelMap model) throws Exception {
		
	}
	
	// 사이트 공지사항 새글쓰기	완료
	@RequestMapping(value = "/sitenoticeInsertMessage.edu"
				  , method = {RequestMethod.POST, RequestMethod.PUT})
	public String sitenoticeInsertMessage(@ModelAttribute("sitenoticeVO") @Validated({Default.class, RegistType.class}) SitenoticeVO sitenoticeVO
										, BindingResult errors
										, ModelMap model) throws Exception {
		
		logger.debug("sitenoticeVO={}", sitenoticeVO);
		
		if (errors.hasErrors()) {
			return "sitenotice/sitenoticeInsert";
		}
		
		try {
			sitenoticeService.insertSitenoticeVO(sitenoticeVO);
			
			return "sitenotice/sitenoticeList";
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
			
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			
			resultMessageVO.setResult(false)
						   .setTitle("조회 실패")
						   .setMessage("해당 글번호가 이미 존재합니다.")
						   .setUrl("/sitenotice/sitenoticeList.edu")
						   .setUrlTitle("목록");

			model.addAttribute("resultMessageVO", resultMessageVO);

			return "common/message";
		}
	}
	
	// 사이트 공지사항 수정
	@RequestMapping(value = "/sitenoticeUpdate.edu")
	public String sitenoticeUpdate(int snNo, ModelMap model) throws Exception {
		
		logger.debug("snNo={}", snNo);
		
		try {
			SitenoticeVO sitenoticeVO = sitenoticeService.getSitenoticeVO(snNo);
			model.addAttribute("sitenoticeVO", sitenoticeVO);
			
			return "sitenotice/sitenoticeUpdate";
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
			
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			
			resultMessageVO.setResult(false)
						   .setTitle("조회 실패")
						   .setMessage("해당 글이 존재하지 않습니다.")
						   .setUrl("/sitenotice/sitenoticeList.edu")
						   .setUrlTitle("목록");

			model.addAttribute("resultMessageVO", resultMessageVO);

			return "common/message";
		}
	}
	
	// 사이트 공지사항 수정	완료
	@RequestMapping(value = "/sitenoticeUpdateMessage.edu")
	public String sitenoticeUpdateMessage(@Validated({Default.class, ModifyType.class}) SitenoticeVO sitenoticeVO
										, BindingResult errors
										, ModelMap model) throws Exception {
		
		logger.debug("sitenoticeVO={}", sitenoticeVO);
		
		if (errors.hasErrors()) {
			return "sitenotice/sitenoticeUpdate";
		}
		
		try {
			sitenoticeService.updateSitenoticeVO(sitenoticeVO);
			
			return "redirect:/sitenotice/sitenoticeView.edu?snNo=" + sitenoticeVO.getSnNo();
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
			
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			
			resultMessageVO.setResult(false)
						   .setTitle("수정 실패")
						   .setMessage("글번호를 찾을 수 없습니다.")
						   .setUrl("/sitenotice/sitenoticeList.edu")
						   .setUrlTitle("목록");

			model.addAttribute("resultMessageVO", resultMessageVO);

			return "common/message";
		}
	}
	
	// 사이트 공지사항 삭제
	@RequestMapping(value = "/sitenoticeDeleteMessage.edu")
	public String sitenoticeDeleteMessage(SitenoticeVO sitenoticeVO, ModelMap model) throws Exception {
		
		logger.debug("sitenoticeVO={}", sitenoticeVO);
		
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			sitenoticeService.deleteSitenoticeVO(sitenoticeVO);
			
			resultMessageVO.setResult(true)
						   .setTitle("글 삭제 성공")
						   .setMessage("게시물이 삭제되었습니다.")
						   .setUrl("/sitenotice/sitenoticeList.edu")
						   .setUrlTitle("목록");
			
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
			
			resultMessageVO.setResult(false)
						   .setTitle("삭제 실패")
						   .setMessage("글번호를 찾을 수 없습니다.")
						   .setUrl("/sitenotice/sitenoticeList.edu")
						   .setUrlTitle("목록");

		}
		model.addAttribute("resultMessageVO", resultMessageVO);
		return "common/message";
	}

}
